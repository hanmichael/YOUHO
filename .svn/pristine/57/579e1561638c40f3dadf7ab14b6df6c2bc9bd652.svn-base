package com.sxt.view;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;

public class GoodsScrollView extends ScrollView {

	private LinearLayout linear;
	private LinearLayout UpLinear;
	private LinearLayout DownLinear;
	private int height = 0;
	private boolean ViewFlag = false;//判断up以及down控制标志->false:划出down
	private PointF startPF = new PointF();

	public GoodsScrollView(Context context, AttributeSet attrs) {
		super(context, attrs);
		initView();
	}

	private void initView(){
		//编写scrollview中嵌套linearlayout
		linear = new LinearLayout(getContext());
		linear.setOrientation(LinearLayout.VERTICAL);
		linear.setLayoutParams
		(new FrameLayout.LayoutParams
				(FrameLayout.LayoutParams.MATCH_PARENT,
						FrameLayout.LayoutParams.WRAP_CONTENT));
		addView(linear);
		//根据上下关系初始化up以及down
		UpLinear = new LinearLayout(getContext());
		UpLinear.setOrientation(LinearLayout.VERTICAL);
		UpLinear.setLayoutParams
		(new LinearLayout.LayoutParams
				(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
		linear.addView(UpLinear);
		DownLinear = new LinearLayout(getContext());
		DownLinear.setOrientation(LinearLayout.VERTICAL);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
				LinearLayout.LayoutParams.WRAP_CONTENT);
		//		lp.topMargin = 10;
		DownLinear.setLayoutParams
		(lp);
		linear.addView(DownLinear);
	}

	//设置uplinear显示内容方法
	public void setUpView(View view){
		UpLinear.addView(view);
	}

	//设置donwlinear显示内容方法
	public void setDownView(ListView view){
		measureLv(view);
		DownLinear.addView(view);
		DownLinear.setVisibility(View.GONE);
	} 

	//由于scrollview嵌套listview测量listview高度
	private void measureLv(ListView view){
		int height = 0;
		ListAdapter adapter = view.getAdapter();
		if(adapter == null)
			return;
		for(int i = 0;i < adapter.getCount();i ++){
			View itemView = adapter.getView(i, null, null);
			itemView.measure(0, 0);
			height+=itemView.getMeasuredHeight();
		}
		height = height + view.getDividerHeight()*adapter.getCount() + 
				view.getPaddingBottom() + view.getPaddingTop();
		LinearLayout.LayoutParams lp = 
				new LinearLayout.LayoutParams
				(LinearLayout.LayoutParams.MATCH_PARENT, height);
		view.setLayoutParams(lp);
		DownLinear.setVisibility(View.GONE);
	}

	@SuppressLint("NewApi")
	@Override
	public boolean dispatchTouchEvent(MotionEvent ev) {

		if(ev.getAction()==MotionEvent.ACTION_DOWN){
			height = getHeight()/5*2;
		}else if(ev.getAction() == MotionEvent.ACTION_MOVE){
			//显示地步view->listview
			if(UpLinear.getVisibility() == View.VISIBLE
					&&DownLinear.getVisibility() == View.GONE){
				if((getScrollY()+getHeight()) >=  computeVerticalScrollRange()){
					DownLinear.setVisibility(View.VISIBLE);
				}
			}else if(UpLinear.getVisibility() == View.GONE
					&&DownLinear.getVisibility() == View.VISIBLE){
				if(getScrollY() == 0){
					UpLinear.setVisibility(View.VISIBLE);
					Log.e("","UpLinear:"+getScrollY());
				}

			}

		}else if(ev.getAction() == MotionEvent.ACTION_UP){
			if(((getScrollY()+getHeight())-
					UpLinear.getMeasuredHeight())>=height){
				UpLinear.setVisibility(View.GONE);
				scrollTo(0,0);
			}else{
				scrollTo(0, (UpLinear.getMeasuredHeight()-getHeight()));
			}
		}
		return super.dispatchTouchEvent(ev);
	}

	@Override
	protected void onScrollChanged(int l, int t, int oldl, int oldt) {
		super.onScrollChanged(l, t, oldl, oldt);
		if(t == UpLinear.getMeasuredHeight()){
			Log.e("","滑动完成隐藏顶部view");
		}
	}

}
