package com.sxt.view;

import com.sxt.activity.R;
import com.sxt.model.ResModel;
import com.sxt.utils.animation.FrameUtils;

import android.content.Context;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.widget.AbsListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.AbsListView.OnScrollListener;
/**
 * 自定义下拉刷新以及上啦加载更多listview
 * 步骤:1.继承Listview,重写构造器;
 *     2.创建下拉刷新模式4个；以及程序判断使用标志模式mode
 *     3.编写顶部以及底部拖动出来view
 *     4.PullListView声明以及初始化
 *     原理:通过自定义listview方法添加一个headerview以及一个footerview（显示上啦刷新以及下拉加载状态）
 *         有与headerview以及footerview默认显示->setpadding->设置到屏幕外
 *         当listview滑动到顶部时触发下拉刷新;滑动到底部时触发上啦加载
 *         
 * */
public class PullListView extends ListView implements OnScrollListener{

	//下拉刷新模式状态
	private final static int DONE = 0;//完成状态
	private final static int PULL_REFRASH = 1;//下拉刷新状态
	private final static int RELEASE_REFRESH = 2;//释放立即刷新状态
	private final static int REFRESHING = 3;//正在刷新状态
	//上拉加载模式状态
	private final static int UP_LOAD = 4;//上啦加载状态
	private final static int RELEASE_LOAD = 5;//释放立即加载状态
	private final static int LOADING = 6;//正在加载状态
	int allHeight = 0;//listview总高度
	//模式
	private int mode = DONE;
	//listview滑动到顶部以及中间以及底部标识
	private int scrollFlag = 1;//0为顶部;1中间;2底部
	//listview 默认滑动以及touch自己处理标志
	private boolean TouchFlag = true;
	//箭头旋转动画
	boolean Top_AnimFlag = false;//释放刷新进入下拉刷新启动动画标志

	//上下文->读取xml使用
	private Context ctx;
	//headview以及footerview高度-》下拉以及上啦时临界值
	private int height = 0;
	//滑动倍数->实际滑动距离与顶部判断显示的倍数
	private int rote = 3;
	private PullCall call;
	//总条数
	private int totalItemCount = 0;
	private int first = 0;
	//记录按下时点
	//PointF->点xy坐标封装->a
	//Ponit与PonitF区别:精度不同；PonitF ->float;Ponit->int
	private PointF pf = new PointF();
	//头部以及底部view
	private View headView;//listview头部
	private ImageView headImg;
	private View footView;
	private ImageView footImg;
	private RelativeLayout r;
	private LinearLayout mAdversetLinear;//广告容器->添加广告自定义view->给自定义广告view在屏幕上展位
	private FrameUtils headUtils;
	private FrameUtils footUtils;
	private int adHeight;

	//初始化动画设置方法
	private void initAnimation(){
		headUtils = new FrameUtils();
		headUtils.create(this.ctx, ResModel.FRAMEDRAWABLE, headImg);
		footUtils = new FrameUtils();
		footUtils.create(this.ctx, ResModel.FRAMEDRAWABLE, footImg);
	}

	//设置下拉刷新以及上啦加载监听
	public void setCall(PullCall call){
		this.call = call;
	}

	public PullListView(Context context, AttributeSet attrs) {
		super(context, attrs);
		this.ctx = context;
		initView();
		initAnimation();//初始化动画
	}

	//初始化headview以及footerview
	private void initView(){
		//获取headview操作
		headView = View.inflate(ctx, R.layout.view_headandfoot, null);
		headImg = (ImageView) headView.findViewById(R.id.HeadFootImg);
		//获取footerview操作
		footView = View.inflate(ctx, R.layout.view_headandfoot, null);
		footImg = (ImageView) footView.findViewById(R.id.HeadFootImg);
		View advertsetView = View.inflate(ctx, R.layout.view_pulllv, null);
		mAdversetLinear = (LinearLayout) advertsetView.findViewById(R.id.PullLvAdversetGroup);
		advertsetView.measure(0, 0);
		adHeight = advertsetView.getMeasuredHeight();
		//由于headview添加到界面中->手动测量headview高度；setpanding方法设置距离top-高度；
		measureView(headView);
		//头部底部完全设置到界面外
		headView.setPadding(0,-height, 0, 0);
		footView.setPadding(0, 0, 0, -height);
		//listview添加头与脚
		addHeaderView(advertsetView,null,false);//添加广告头
		addHeaderView(headView, null, false);
		addFooterView(footView, null, false);
		setOnScrollListener(this);
	}

	//设置广告view头
	public void setADView(View view){
		mAdversetLinear.addView(view);
	}

	//隐藏广告头文件
	public void disADView(){
		mAdversetLinear.setVisibility(View.GONE);
	}

	//获取广告高度方法
	public int getADHeight(){
		return adHeight;
	}

	//判断区分listview滑动生效或滑动显示headview或footerview
	//支持itemview 滑动删除操作
	@Override
	public boolean dispatchTouchEvent(MotionEvent ev) {
		if(ev.getAction() == MotionEvent.ACTION_DOWN){
			//记录开始按下点
			pf.x = ev.getX();
			pf.y = ev.getY();
			return super.dispatchTouchEvent(ev);
		}else if(ev.getAction() == MotionEvent.ACTION_MOVE){
			//获取当前手指所在坐标
			PointF nowpf = new PointF();
			nowpf.x = ev.getX();
			nowpf.y = ev.getY();
			//上下左右滑动区分->判断水平滑动距离与垂直滑动距离大小->itemView滑动删除
			if((Math.abs(pf.x - nowpf.x)/2-Math.abs(pf.y-nowpf.y))>10){
				return super.dispatchTouchEvent(ev);
			}
			Log.e("","scrollFlag:"+scrollFlag);
			//listview处于顶部-》从下向上 滑动时-.修改为可滑动状态
			if((nowpf.y - pf.y)/rote < 0 && scrollFlag == 0){
				//				TouchFlag = false;
				scrollFlag = 1;
			}else if((nowpf.y - pf.y)/rote > 0 && scrollFlag == 2){
				//				TouchFlag = true;
				//listview处于底部->从上向下滑动时->修改为可滑动状态
				scrollFlag = 1;
			}
			Log.e("","scrollFlag1:"+scrollFlag);
			//垂直处理->区分下拉刷新以及上啦加载更多
			if(scrollFlag == 0){
				float dis_Y = (nowpf.y - pf.y)/rote;
				//下拉刷新->状态切换
				if(mode != REFRESHING){
					this.setSelection(0);
					//下拉刷新->切换为完成;释放立即刷新
					if(mode == PULL_REFRASH){
						//下拉刷新切换为完成
						if(dis_Y<0){
							mode = DONE;
							selectMode();
						}
						//下拉刷新切换为释放立即刷新
						if(dis_Y >= height){
							mode = RELEASE_REFRESH;
							selectMode();
						}
					}
					//释放立即刷新->下拉刷新
					if(mode == RELEASE_REFRESH){
						if(dis_Y < height){
							mode = PULL_REFRASH;
							Top_AnimFlag = true;
							selectMode();
						}
					}
				}
				if(mode == DONE){
					this.setSelection(0);
					//转化为下拉刷新态
					if(dis_Y > 0){
						mode = PULL_REFRASH;
						selectMode();
					}
				}
				if(mode == PULL_REFRASH){
					this.setSelection(0);
					//改变headviewpanding
					headView.setPadding(0, (int)(dis_Y-height), 0, 0);
				}
				if(mode == RELEASE_REFRESH){
					this.setSelection(0);
					//改变headviewpanding
					headView.setPadding(0, (int)(dis_Y-height), 0, 0);
				}
				return true;//使listview 无法滑动
			}else if(scrollFlag == 2){
				//上啦
				float dis_Y = (nowpf.y - pf.y)/rote;
				if(mode != LOADING){
					if(mode == UP_LOAD){
						setSelection(getCount()-2);
						if(dis_Y>=0){
							mode = DONE;
							selectMode();
						}
						if(dis_Y<=-height){
							mode = RELEASE_LOAD;
							selectMode();
						}
					}
					if(mode == RELEASE_LOAD){
						if(dis_Y>-height){
							mode = UP_LOAD;
							selectMode();
						}
					}
				}
				if(mode == DONE){
					//上拉加载状态
					if(dis_Y <= 0){
						mode = UP_LOAD;
						selectMode();
					}
				}
				if(mode == UP_LOAD){
					setSelection(getCount()-2);
					footView.setPadding(0, 0, 0, (int)Math.abs(dis_Y)-height);
				}
				if(mode == RELEASE_LOAD){
					setSelection(getCount()-2);
					footView.setPadding(0, 0, 0, (int)Math.abs(dis_Y)-height);
				}
				return true;
			}else if(scrollFlag == 1){
				return super.dispatchTouchEvent(ev);
			}
		}else if(ev.getAction() == MotionEvent.ACTION_UP){
			scrollFlag = 1;
			//没有达到释放立即刷新标准时回复DONE
			if(mode != RELEASE_REFRESH && mode != RELEASE_LOAD){
				mode = DONE;
				selectMode();
			}
			if(mode == RELEASE_REFRESH){
				mode = REFRESHING;
				selectMode();
				call.RefrashCall();
			}
			if(mode == RELEASE_LOAD){
				mode = LOADING;
				selectMode();
				call.LoadCall();
			}
		}
		return super.dispatchTouchEvent(ev);
	}	

	//根据当前状态修改textview以及imageview显示内容
	private void selectMode(){
		switch(mode){
		case DONE:
			headUtils.stopFrame();
			footUtils.stopFrame();
			headView.setPadding(0, -height, 0, 0);
			footView.setPadding(0, 0, 0, -height);
			break;
		case PULL_REFRASH:
			footView.setPadding(0, 0, 0, -height);
			if(Top_AnimFlag)
				headUtils.startFrame();
			Top_AnimFlag =false;
			break;
		case RELEASE_REFRESH:
			footView.setPadding(0, 0, 0, -height);
			headUtils.startFrame();
			break;
		case REFRESHING:
			headImg.clearAnimation();
			headView.setPadding(0, 0, 0, 0);//headview显示到listview顶部
			footView.setPadding(0, 0, 0, -height);
			break;
		case UP_LOAD:
			headView.setPadding(0, -height, 0, 0);
			break;
		case RELEASE_LOAD:
			headView.setPadding(0, -height, 0, 0);
			break;
		case LOADING:
			headView.setPadding(0, -height, 0, 0);
			footView.setPadding(0, 0, 0, 0);
			footUtils.startFrame();
			break;
		}
	}

	//测量headview以及footerview高度方法
	//view->被测量view
	private void measureView(View view){
		//measure->测量方法
		headView.measure(
				MeasureSpec.makeMeasureSpec(
						AbsListView.LayoutParams.MATCH_PARENT,
						MeasureSpec.EXACTLY),
						MeasureSpec.makeMeasureSpec(
								AbsListView.LayoutParams.WRAP_CONTENT, 
								MeasureSpec.UNSPECIFIED));
		/*
		 * getheight()->控件在界面上显示的高度
		 * getMeasuredHeight()->控件实际测量高度
		 * */
		height = headView.getMeasuredHeight();
	}



	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
	}


	@Override
	public void onScroll(AbsListView view, int firstVisibleItem,
			int visibleItemCount, int totalItemCount) {
		if(firstVisibleItem!=0&&
				(firstVisibleItem+visibleItemCount)<(totalItemCount-1)){
			scrollFlag = 1;
		}
		totalItemCount = totalItemCount-1;
		//滑动到顶部
		if(firstVisibleItem == 0){
			scrollFlag = 0;
		}
		Log.e("","firstVisibleItem:"+firstVisibleItem);
		Log.e("","visibleItemCount:"+visibleItemCount);
		Log.e("","totalItemCount:"+totalItemCount);
		Log.e("","firstVisibleItem>=(totalItemCount-visibleItemCount-2):"+
				(firstVisibleItem>=(totalItemCount-visibleItemCount-2)));
		Log.e("","TouchFlag:"+TouchFlag);
		Log.e("",">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.");
		//滑动到底部
		if(firstVisibleItem>=(totalItemCount-visibleItemCount-2)){
			first = firstVisibleItem;
			scrollFlag = 2;
			Log.e("","上啦判断");
		}
	}

	//切换完成方法
	public void complate(){
		mode = DONE;
		selectMode();
		scrollFlag = 1;
		headView.setPadding(0, -height, 0, 0);
		footView.setPadding(0, 0, 0, -height);
	}

	//回调到调用本自定义view界面去进行联网请求
	public interface PullCall{
		public void RefrashCall();
		public void LoadCall();
	}
}
